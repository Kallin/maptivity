<!DOCTYPE html>
<html>
<head>
    <title>Maptivity</title>
    <%= stylesheet_link_tag "application", media: "all", "data-turbolinks-track" => true %>
    <style type="text/css">
            /*.google-map-canvas, .google-map-canvas * { .box-sizing(content-box); }*/

            /* Optional responsive image override */


    </style>
    <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
    <!--<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBbzxZflhNcviymo00GFRAAmyXZCqoGap8&sensor=true&libraries=drawing"></script>-->
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBbzxZflhNcviymo00GFRAAmyXZCqoGap8&sensor=true&libraries=geometry"></script>
    <script type="text/javascript">

        // This example adds hide() and show() methods to a custom overlay's prototype.
        // These methods toggle the visibility of the container <div>.
        // Additionally, we add a toggleDOM() method, which attaches or detaches the
        // overlay to or from the map.

        var overlay;

        google.maps.visualRefresh = true;
        var map;
        var overlay;

        CourtOverlay.prototype = new google.maps.OverlayView();



        function initialize() {
            var mapOptions = {
                zoom: 19,
                center: new google.maps.LatLng(37.8012, -122.42),
                mapTypeId: google.maps.MapTypeId.HYBRID,
                tilt: 0
            };
            map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);


            var swBound = new google.maps.LatLng(62.281819, -150.287132);
            var neBound = new google.maps.LatLng(62.400471, -150.005608);
            var bounds = new google.maps.LatLngBounds(swBound, neBound);


            window.overlay_ = new CourtOverlay(bounds, map);

            google.maps.event.addListener(map, 'dragend', function () {
                console.log('dragged')
                window.overlay_.draw();

                //console.log("done dragging")
            });
        }

        /** @constructor */
        function CourtOverlay(bounds, map) {

            // Now initialize all properties.
            this.bounds_ = bounds;
            this.map_ = map;

            // Define a property to hold the image's div. We'll
            // actually create this div upon receipt of the onAdd()
            // method so we'll leave it null for now.
            this.div_ = null;
            this.paper_ = null;

            // Explicitly call setMap on this overlay
            this.setMap(map);
        }

        /**
         * onAdd is called when the map's panes are ready and the overlay has been
         * added to the map.
         */
        CourtOverlay.prototype.onAdd = function () {

            var div = document.createElement('div');
            div.style.border = 'none';
            div.style.borderWidth = '0px';
            div.style.position = 'absolute';
            div.className = "someclass";

            this.div_ = div;

            // Add the element to the "overlayImage" pane.
            var panes = this.getPanes();
            panes.overlayImage.appendChild(this.div_);
        };

        CourtOverlay.prototype.draw = function () {

            //todo: need to have the div raphael is drawing into updated so that it doesn't scroll out
            console.log("drawing...")

            if (this.paper_)
                this.paper_.clear();

            //todo: extend the canvas beyond the map so any normal drag is covered
            var map = $("#map-canvas");
            this.paper_ = new Raphael(this.div_, map.width(), map.height());


            var court1Center = new google.maps.LatLng(37.801534, -122.420358);
            var court2Center = new google.maps.LatLng(37.801553, -122.420211);
            var court3Center = new google.maps.LatLng(37.801571, -122.420042);
            var court4Center = new google.maps.LatLng(37.801590, -122.419892);


            var overlayProjection = this.getProjection();

            var cornerLatLon = overlayProjection.fromDivPixelToLatLng(new google.maps.Point(0,0));
            var offSetLatLon = overlayProjection.fromDivPixelToLatLng(new google.maps.Point(500,0));

            // now figure out meter distance of 500 pixels based on long difference
            var offsetMeters = google.maps.geometry.spherical.computeDistanceBetween(cornerLatLon, offSetLatLon);
            // assuming for the sake of drawing at close range that both x and y pixels represent the same distance per pixel
            var metersPerPixel = offsetMeters / 500;

            drawCourt(this.paper_, court1Center, -8, overlayProjection, metersPerPixel);
            drawCourt(this.paper_, court2Center, -8, overlayProjection, metersPerPixel);
            drawCourt(this.paper_, court3Center, -8, overlayProjection, metersPerPixel);
            drawCourt(this.paper_, court4Center, -8, overlayProjection, metersPerPixel);

        };

        function drawCourt(paper, centerLatLon, rotation, overlayProjection, metersPerPixel) {

            // official court measurements are in feet, but we want meters
            // 1 foot = 0.3048 meters
            var width = 36 * 0.3048;
            var height = 78 * 0.3048;


            var pixelWidth = width / metersPerPixel;
            var pixelHeight = height / metersPerPixel;

            var centerPoint = overlayProjection.fromLatLngToDivPixel(centerLatLon);
            var topLeftCornerPoint = new google.maps.Point(centerPoint.x - (width / 2 / metersPerPixel), centerPoint.y - (height / 2 /metersPerPixel));

            var rect = paper.rect(topLeftCornerPoint.x, topLeftCornerPoint.y, pixelWidth, pixelHeight);
            rect.attr ("stroke", "#0000FF");
            rect.transform("r-8");
        }




        google.maps.event.addDomListener(window, 'load', initialize);


    </script>
    <%= csrf_meta_tags %>
</head>
<body>

<%= yield %>


</body>
</html>
